{"ast":null,"code":"export var addComment=function addComment(comment){// Thunk allows fn to take dispatch fn as an argument\n// gives us access to dispatch fn\nreturn function(dispatch){fetch(\"http://jlam-portfolio-backend.herokuapp.com//api/v1/projects/\".concat(comment.project_id,\"/comments\"),{headers:{// data content sent to backend will be json\n'Content-Type':'application/json',// what content types will be accepted on the return of data\n'Accept':'application/json'},method:'POST',// tell server to expect data as a JSON string\nbody:JSON.stringify(comment)})//immediately render the new data\n.then(function(resp){return resp.json();}).then(function(newComment){return dispatch({type:'ADD_COMMENT',comment:newComment});});};};","map":{"version":3,"sources":["/Users/jackie.lam/Projects/portfolio-app/src/actions/addComment.js"],"names":["addComment","comment","dispatch","fetch","project_id","headers","method","body","JSON","stringify","then","resp","json","newComment","type"],"mappings":"AAAA,MAAO,IAAMA,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAAAC,OAAO,CAAI,CACnC;AACA;AACA,MAAO,UAACC,QAAD,CAAc,CACnBC,KAAK,wEAAiEF,OAAO,CAACG,UAAzE,cAAgG,CACnGC,OAAO,CAAE,CACP;AACA,eAAgB,kBAFT,CAGP;AACA,SAAU,kBAJH,CAD0F,CAOnGC,MAAM,CAAE,MAP2F,CAQnG;AACAC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAeR,OAAf,CAT6F,CAAhG,CAWH;AAXF,CAYGS,IAZH,CAYQ,SAAAC,IAAI,QAAIA,CAAAA,IAAI,CAACC,IAAL,EAAJ,EAZZ,EAaGF,IAbH,CAaQ,SAAAG,UAAU,QAAIX,CAAAA,QAAQ,CAAC,CAAEY,IAAI,CAAE,aAAR,CAAuBb,OAAO,CAAEY,UAAhC,CAAD,CAAZ,EAblB,EAcD,CAfD,CAgBD,CAnBM","sourcesContent":["export const addComment = comment => {\n  // Thunk allows fn to take dispatch fn as an argument\n  // gives us access to dispatch fn\n  return (dispatch) => {\n    fetch(`http://jlam-portfolio-backend.herokuapp.com//api/v1/projects/${comment.project_id}/comments`, {\n      headers: {\n        // data content sent to backend will be json\n        'Content-Type': 'application/json',\n        // what content types will be accepted on the return of data\n        'Accept': 'application/json'\n      },\n      method: 'POST',\n      // tell server to expect data as a JSON string\n      body: JSON.stringify(comment)\n    })\n      //immediately render the new data\n      .then(resp => resp.json())\n      .then(newComment => dispatch({ type: 'ADD_COMMENT', comment: newComment }))\n  }\n}"]},"metadata":{},"sourceType":"module"}